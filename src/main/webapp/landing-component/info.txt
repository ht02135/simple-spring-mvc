
ccs position

https://www.geeksforgeeks.org/css/difference-between-relative-and-absolute-position-in-css/

example of position: relative; property. The element is shifted 50px to the right using the left property, but it still occupies its original space in the document flow.

    <style>
        div.relative {
            position: relative;
            left: 50px;
            border: 3px solid #73AD21;
        }
    </style>
    
    <div class="relative">
        This element has position:relative;
    </div>
    
The absolute element is positioned 80px from the top and right of its closest positioned ancestor (the relative container).

    <style>
        div.relative {
            position: relative;
            width: 400px;
            height: 200px;
            border: 3px solid #73AD21;
        }
        
        div.absolute {
            position: absolute;
            top: 80px;
            right: 80px;
            width: 200px;
            height: 100px;
            border: 3px solid #73AD21;
        }
    </style>
    
    <div class="relative">
        This element has position: relative;
        <div class="absolute">
            This element has position: absolute;
        </div>
    </div>
    
/////////////////

https://www.freecodecamp.org/news/css-positioning-position-absolute-and-relative/

1>By default, the position property for all HTML elements in CSS is set to static.

Elements appear one after the other – directly below one another, according to the order of the HMTL code.

The position property isn't declared in the above code and it therefore reverts to the default position: static. It follows the order of the HTML code.

2>position: relative works the same way as position: static;, but it lets you change an element's position.

To modify the position, you'll need to apply the top, bottom, right, and left properties

The top, bottom, right, and left offsets push the tag away from where it's specified, working in reverse.

top in fact moves the element towards the bottom of the element's parent container. bottom pushes the element towards the top of the element's parent container, and so on.

move the first square to the left by updating the CSS like this:

.one {
  background-color: powderblue;
  position: absolute;
  top: 50px;
  left: 0;
}

3>If you update the CSS rule for the first square to the following:

.one {
  background-color: powderblue;
  position: absolute;
}

.one {
  background-color: powderblue;
}

.two {
  background-color: royalblue;
}

.three {
  background-color: sienna;
}

.four {
  background-color: slateblue;
}

This is unexpected behavior. The second square has completely disappeared.

Absolute-positioned elements are completely taken out of the regular flow of the web page.

They are not positioned based on their usual place in the document flow, but based on the position of their ancestor.

In the example above, the absolutely positioned square is inside a statically positioned parent.

//////////////////

flex-grow: 1

https://cssreference.io/property/flex-grow/

1>flex-grow: 0;
The element will not grow if there's space available. It will only use the space it needs.

2>flex-grow: 1;
The element will grow by a factor of 1. It will fill up the remaining space if no other flexbox item has a flex-grow value.

//////////////////////

The HTML <svg> element is a container for SVG graphics.

ex this draw a circle
<svg width="100" height="100">
  <circle cx="50" cy="50" r="40" stroke="green" stroke-width="4" fill="yellow" />
</svg>

this draw rectangle
<svg width="400" height="120">
  <rect x="10" y="10" width="200" height="100" stroke="red" stroke-width="6" fill="blue" />
</svg>

this draw line
<svg height="200" width="300" xmlns="http://www.w3.org/2000/svg">
  <line x1="0" y1="0" x2="300" y2="200" style="stroke:red;stroke-width:2" />
</svg>

////////////////

https://www.w3schools.com/js/js_htmldom_css.asp

To change the style of an HTML element, use this syntax:
document.getElementById(id).style.property = new style

<p id="p2">Hello World!</p>

<script>
document.getElementById("p2").style.color = "blue"; // prop name is case sensitive
</script>

////////////////

display: grid;

The grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column.

<style>
.container {
  display: grid;
  grid-template-columns: auto auto auto;  //3 column
  background-color: dodgerblue;
  padding: 10px;
}

.container > div {
  background-color: #f1f1f1;
  border: 1px solid black;
  padding: 20px;
  font-size: 30px;
  text-align: center;
}
</style>

<div class="container">
  <div>1</div>
  <div>2</div>
  <div>3</div>  
  <div>4</div>
  <div>5</div>
  <div>6</div>  
  <div>7</div>
  <div>8</div>
</div>

//////////////////

Set a fixed size for column 1, 2, and 4, and keep column 3 as auto size:

.grid-container {
  display: grid;
  grid-template-columns: 80px 200px auto 40px;
}

/////////////////////

The fr unit stands for "fraction". This unit automatically divides the available space into fractions.

Example: 1fr will take 1 fraction of the available space, while 2fr will take 2 fractions of the available space.

Here, each column will take up 25% of the container width, splitting it equally:

.grid-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
}

//////////////////////////

just one column grid
grid-template-columns: 1fr;

https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/

if you’re creating a 12-columns grid, you could write the following one-liner:
grid-template-columns: repeat(12, 1fr);

But the way CSS Grid works, this will cause overflow in the row. The columns will 
not wrap into new rows if the viewport width is too narrow to fit them all with 
the new minimum width requirement, because we’re explicitly telling the browser 
to repeat the columns 12 times per row.

To achieve wrapping, we can use the auto-fit or auto-fill keywords.
grid-template-columns: repeat( auto-fit, minmax(250px, 1fr) );

//////////////////////////////////

Fill or Fit? What’s the difference?
In a recent CSS workshop, I summarized the difference between auto-fill and auto-fit as follows:

auto-fill FILLS the row with as many columns as it can fit. So it creates implicit 
columns whenever a new column can fit, because it’s trying to FILL the row with as 
many columns as it can. The newly added columns can and may be empty, but they will 
still occupy a designated space in the row.

auto-fit FITS the CURRENTLY AVAILABLE columns into the space by expanding them so 
that they take up any available space. The browser does that after FILLING that 
extra space with extra columns (as with auto-fill ) and then collapsing the 
empty ones.

/////////////////////

difference between auto-fill and auto-fit
.grid-container--fill {
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
}

.grid-container--fit {
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

if you strech the width out
1>grid-container--fill column width stay the same
2>grid-container--fit column width strech out as you strech the width

//////////////////////////


