
https://www.mindstick.com/blog/304434/getting-started-with-knockout-js-a-beginner-s-guide

1>adding the following script tag to the <head> or at the end of the <body>:

<!-- Link to Knockout.js library for MVVM pattern support -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.1/knockout-latest.min.js"
    integrity="sha512-vs7+jbztHoMto5Yd/yinM4/y2DOkPLt0fATcN+j+G4ANY2z4faIzZIOMkpBmWdcxt+596FemCh9M18NUJTZwvw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    
2>Creating a Simple Application
Let's create a simple application that allows you to manage a list of products. We'll cover the following steps:

Setting up the HTML structure.
Creating the ViewModel.
Binding the ViewModel to the View.

//////////////////

3>Step 1: Setting Up the HTML Structure

Create an HTML file with the following structure:

<!doctype html>
<html lang="en">

<head>
    <!-- Meta tags for character set and viewport configuration -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title of the webpage -->
    <title>Bootstrap demo</title>

    <!-- Link to Bootstrap CSS for styling -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <!-- Link to Knockout.js library for MVVM pattern support -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.1/knockout-latest.min.js"
        integrity="sha512-vs7+jbztHoMto5Yd/yinM4/y2DOkPLt0fATcN+j+G4ANY2z4faIzZIOMkpBmWdcxt+596FemCh9M18NUJTZwvw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>

<body>
    <!-- Main container using Bootstrap's grid system -->
    <div class="container">
        <!-- Header for the example -->
        <h2>Simple Knockout.js Example</h2>

        <!-- Section containing the interactive elements -->
        <div>
            <label>Name: </label>
            <!-- Text input bound to the 'name' observable -->
            <input id="nameInput" type="text" data-bind="value: name, valueUpdate: 'input'">
            <!-- Paragraph displaying the bound 'name' observable -->
            <p>Hello, <span data-bind="text: name"></span>!</p>
        </div>
    </div>

    <!-- JavaScript section defining the ViewModel and applying bindings -->
    <script>
        // ViewModel definition
        function AppViewModel() {
            // Observable property 'name' initialized with the value "World"
            this.name = ko.observable("John Doe");
        }

        // Apply Knockout.js bindings to the ViewModel instance
        ko.applyBindings(new AppViewModel());
    </script>
</body>
Step 1: Setting Up the HTML Structure

Create an HTML file with the following structure:

<!doctype html>
<html lang="en">

<head>
    <!-- Meta tags for character set and viewport configuration -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title of the webpage -->
    <title>Bootstrap demo</title>

    <!-- Link to Bootstrap CSS for styling -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <!-- Link to Knockout.js library for MVVM pattern support -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.1/knockout-latest.min.js"
        integrity="sha512-vs7+jbztHoMto5Yd/yinM4/y2DOkPLt0fATcN+j+G4ANY2z4faIzZIOMkpBmWdcxt+596FemCh9M18NUJTZwvw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>

<body>
    <!-- Main container using Bootstrap's grid system -->
    <div class="container">
        <!-- Header for the example -->
        <h2>Simple Knockout.js Example</h2>

        <!-- Section containing the interactive elements -->
        <div>
            <label>Name: </label>
            <!-- Text input bound to the 'name' observable -->
            <input id="nameInput" type="text" data-bind="value: name, valueUpdate: 'input'">
            <!-- Paragraph displaying the bound 'name' observable -->
            <p>Hello, <span data-bind="text: name"></span>!</p>
        </div>
    </div>

    <!-- JavaScript section defining the ViewModel and applying bindings -->
    <script>
        // ViewModel definition
        function AppViewModel() {
            // Observable property 'name' initialized with the value "World"
            this.name = ko.observable("John Doe");
        }

        // Apply Knockout.js bindings to the ViewModel instance
        ko.applyBindings(new AppViewModel());
    </script>
</body>

</html>
//////////////////////

4>Step 2: Creating the ViewModel

The ViewModel in Knockout.js acts as the intermediary between the View (HTML) and the Model (data). Here's the ViewModel for our product management application:

// ViewModel definition
function AppViewModel() {
    // Observable property 'name' initialized with the value "World"
    this.name = ko.observable("John Doe");
}

///////////////////////

5>Step 3: Binding the ViewModel to the View

To connect the ViewModel to the View, you need to call the ko.applyBindings function and pass an instance of the ViewModel:

// Apply Knockout.js bindings to the AppViewModel
ko.applyBindings(new AppViewModel());

/////////////////////////////

Your view models are JavaScript objects

ou could just serialize them as JSON using any standard JSON serializer, such as JSON.stringify

------------

ko.toJS — this clones your view model’s object graph, substituting for each observable the 
current value of that observable, so you get a plain copy that contains only your data 
and no Knockout-related artifacts

huh, doesnt that mean you lose ko functionality?

--------------

ko.toJSON — this produces a JSON string representing your view model’s data. Internally, 
it simply calls ko.toJS on your view model, and then uses the browser’s native JSON 
serializer on the result

//////////////////////////////

you viewmodel might contain observable and function and blaba
you might want to run toJSON so easy to send json to server

var jsonData = ko.toJSON(viewModel);

Or, if you just want the plain JavaScript object graph before serialization, use ko.toJS as follows:

var plainJs = ko.toJS(viewModel);

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

Updating View Model Data using JSON
If you’ve loaded some data from the server and want to use it to update your view model, the most straightforward way is to do it yourself. For example,

// Load and parse the JSON
var someJSON = /* Omitted: fetch it from the server however you want */;
var parsed = JSON.parse(someJSON);
 
// Update view model properties
viewModel.firstName(parsed.firstName);
viewModel.pets(parsed.pets);

//////////////////////////////
/////////////////////////////

https://knockoutjs.com/documentation/plugins-mapping.html

var viewModel = {
    serverTime: ko.observable(),
    numUsers: ko.observable()
}

var data = getDataUsingAjax();          // Gets the data from the server
The server might return JSON data similar to the following:

{
    serverTime: '2010-01-07',
    numUsers: 3
}

every time you receive new data from the server, you can update all the properties on viewModel in one step by calling the ko.mapping.fromJS function again:

// Every time data is received from the server:
ko.mapping.fromJS(data, viewModel);

Working with JSON strings
If your Ajax call returns a JSON string (and does not deserialize it into a JavaScript object), then you can use the function ko.mapping.fromJSON to create and update your view model instead. To unmap, you can use ko.mapping.toJSON.

//////////////////////////////
/////////////////////////////

https://www.syncfusion.com/forums/129943/knockoutjs-succintly-mapping-data-to-viewmodels-page-58-59

<script type='text/javascript'>
	$.getJSON("/get-user-data", function(data) {
		var viewModel = ko.mapping.fromJS(data);
		ko.applyBindings(viewModel);
	});
</script>

viewModel.loadUserData = function () { 
       $.getJSON("/get-user-data", function (data) { 
           // update the data in existing ViewModel. 
           ko.mapping.fromJS(data, viewModel); 
       }); 
  } 
  
/////////////////////////
/////////////////////////

saveUserData method: 
 
  viewModel.saveUserData = function() { 
      // Convert the viewModel into JSON. 
      var data_to_send = {userData: ko.toJSON(viewModel)}; 
      // Send that JSON data to server. 
      $.post("/save-user-data", data_to_send, function(data) { 
           alert("Your data has been posted to the server!"); 
      }); 
      
////////////////////////////
/////////////////////////////


    <div class='sample'> 
        <p>Load: <input type="button" value="Load User Data" data-bind="click: loadUserData" /></p> 
        <p>Name: <input data-bind='value: firstName' /></p> 
        <p>Save: <input type="button" value="Save User Data" data-bind="click: saveUserData" /></p> 
    </div> 
    <script> 
        $(document).ready(function () { 
            var viewModel = {}; 
            viewModel.firstName = ko.observable('Knockout JS'); 
            viewModel.loadUserData = function () { 
                $.getJSON("/data.json", function (data) { 
                    // update the data in existing ViewModel. 
                    ko.mapping.fromJS(data, viewModel); 
                    viewModel.firstName(data.name); 
                }); 
            }; 
            viewModel.saveUserData = function () { 
                // Convert the viewModel into JSON. 
                var data_to_send = { userData: ko.toJSON(viewModel) }; 
                // Send that JSON data to server. 
                $.post("/save-user-data", data_to_send, function (data) { 
                    alert("Your data has been posted to the server!"); 
                }).fail(function () { 
                    alert("Ensure the Url before save the data"); 
                }); 
            }; 
            ko.applyBindings(viewModel); 
        }); 
    </script> 
    
 