
Spring Hibernate Interview Questions

/////////////////////////

1>What are the ways to access Hibernate by using Spring?

1>Spring Data JPA (Recommended for modern applications):

1a>This is the preferred approach for new projects. Spring Data JPA 
significantly simplifies data access by providing powerful repository 
abstractions.
1b>You define interfaces that extend Spring Data JPA's JpaRepository 
(or other repository interfaces like CrudRepository).
1c>Spring automatically generates the implementation for these interfaces 
at runtime, handling common CRUD operations and allowing for custom 
queries based on method names or @Query annotations.
1d>Hibernate acts as the underlying JPA provider, managing the 
object-relational mapping and database interactions.

@Repository
public interface CustomerRepository extends JpaRepository<Customer, Long> {

    // ================= Derived Queries overridden with @Query =================

    @Query("SELECT c FROM Customer c WHERE c.lastName = :lastName")
    List<Customer> findByLastName(@Param("lastName") String lastName);

    @Query("SELECT c FROM Customer c WHERE c.gender = :gender")
    List<Customer> findByGender(@Param("gender") String gender);
    
------------------

2>ative Hibernate SessionFactory Integration:

2a>This method directly exposes Hibernate's SessionFactory within 
the Spring container.
2b>You configure LocalSessionFactoryBean in your Spring configuration 
(either Java-based or XML-based) to set up the SessionFactory.
2c>You then inject the SessionFactory into your DAOs (Data Access Objects) 
and use it to obtain Session instances for performing database operations.
2d>While still supported, this approach is less common in new development 
compared to Spring Data JPA, as it requires more boilerplate code for basic operations.

@Repository
public class CustomerDaoImpl implements CustomerDao {

    @Autowired
    private SessionFactory sessionFactory;

    private Session getCurrentSession() {
        return sessionFactory.getCurrentSession();
    }

    @Override
    public Customer save(Customer customer) {
        getCurrentSession().saveOrUpdate(customer);
        return customer;
    }
    
    @Override
    public List<Customer> findByDepartmentNameAndActive(String departmentName, Boolean active) {
        Query<Customer> query = getCurrentSession().createQuery(
                "SELECT c FROM Customer c " +
                "JOIN Department d ON c.deptId = d.id " +
                "WHERE d.name = :deptName AND c.active = :active " +
                "ORDER BY c.salary DESC",
                Customer.class);
        query.setParameter("deptName", departmentName);
        query.setParameter("active", active);
        return query.getResultList();
    }

    @Override
    public int countByDepartmentAndSalaryThreshold(Long departmentId, BigDecimal salary) {
        Query<Long> query = getCurrentSession().createQuery(
                "SELECT COUNT(c) FROM Customer c WHERE c.deptId = :deptId AND c.salary > :salary",
                Long.class);
        query.setParameter("deptId", departmentId);
        query.setParameter("salary", salary);
        return query.getSingleResult().intValue();
    }
       
/////////////////////////

2>What is the hibernate configuration file?

/////////////////////////

3>What is hibernate mapping file?

/////////////////////////

4>What is the difference between the Hibernate Session get() and load() method?

/////////////////////////

5>What is hibernate caching? Explain Hibernate first-level cache?

/////////////////////////

6>What will happen if we donâ€™t have a no-args constructor in Entity bean?

/////////////////////////

7>Explain the difference between sorted collection and ordered collection. 
Which one is better, in your opinion?

/////////////////////////

8>Are there any collection types in Hibernate?

/////////////////////////

9>Is it possible to execute a native SQL query in hibernate?

/////////////////////////

10.  What is the benefit of native SQL query support in hibernate?

/////////////////////////
