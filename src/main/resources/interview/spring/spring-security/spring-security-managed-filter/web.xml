<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
         
    <!--
    Filter Managed by the Servlet Container
	You can configure a filter managed by the servlet container using a web.xml 
	deployment descriptor. This approach is standard for all servlet containers 
	and doesn't involve Spring at all. You define the filter, map it to a URL 
	pattern, and specify its initialization parameters.  
    -->
    <filter>
        <filter-name>servletContainerFilter</filter-name>
        <filter-class>com.example.filters.ServletContainerManagedFilter</filter-class>
        <init-param>
            <param-name>param1</param-name>
            <param-value>value1</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>servletContainerFilter</filter-name>
        <url-pattern>/api/*</url-pattern>
    </filter-mapping>
    
    <!--
    Filter Managed by the Spring Container
	To have a filter managed by the Spring container in an XML-based configuration, 
	you define it as a bean in your Spring application context file 
	(applicationContext.xml). You then use a special bean, 
	org.springframework.web.filter.DelegatingFilterProxy, to bridge the servlet 
	container's filter chain to your Spring-managed filter bean.
	To use this, you also need to define the DelegatingFilterProxy in your 
	web.xml:  
    -->
	<filter>
        <filter-name>delegatingFilterProxy</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>delegatingFilterProxy</filter-name>
        <url-pattern>/api/*</url-pattern>
    </filter-mapping>
        
</web-app>