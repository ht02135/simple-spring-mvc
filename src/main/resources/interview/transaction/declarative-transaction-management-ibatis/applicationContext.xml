<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           https://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           https://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/tx
           https://www.springframework.org/schema/tx/spring-tx.xsd">
           
    <!-- 
    applicationContext.xml for MyBatis + Spring
    //////////////////////////////
    âœ… Notes:
    1>Mapper interfaces (UserMapper, CourseMapper, InvoiceMapper) are 
    automatically instantiated by MapperScannerConfigurer.
	Spring creates a proxy implementation that delegates to MyBatis SQL statements.
	Then they are injected into your services via <property name="userMapper" 
	ref="userMapper"/>, etc.
	2>@Transactional in services works with DataSourceTransactionManager.
	3>Controllers are injected with services as usual.
    -->

    <!-- ====================== Component Scan ====================== -->
    <context:component-scan base-package="x.y"/>

    <!-- ====================== DataSource ====================== -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/testdb?useSSL=false"/>
        <property name="username" value="root"/>
        <property name="password" value="password"/>
    </bean>

    <!-- ====================== SqlSessionFactory ====================== -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- optional: type aliases package -->
        <property name="typeAliasesPackage" value="x.y.model"/>
    </bean>

    <!-- ====================== Transaction Manager ====================== -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- Enable @Transactional support -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- ====================== MyBatis Mapper Scanner ====================== -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="x.y.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- ====================== Services ====================== -->
    <bean id="userService" class="x.y.service.UserService">
        <property name="userMapper" ref="userMapper"/>
        <property name="invoiceService" ref="invoiceService"/>
    </bean>

    <bean id="courseService" class="x.y.service.CourseService">
        <property name="courseMapper" ref="courseMapper"/>
    </bean>

    <bean id="invoiceService" class="x.y.service.InvoiceService">
        <property name="invoiceMapper" ref="invoiceMapper"/>
    </bean>

    <!-- ====================== Controllers ====================== -->
    <bean id="userController" class="x.y.controller.UserController">
        <property name="userService" ref="userService"/>
    </bean>

    <bean id="courseController" class="x.y.controller.CourseController">
        <property name="courseService" ref="courseService"/>
    </bean>

</beans>