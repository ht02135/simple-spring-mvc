<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
                           
    <!-- 
    To complete the Spring programmatic transaction management example, you need to 
    configure the ProductService and the TransactionTemplate using an XML-based 
    configuration file.
	Here is an example of an applicationContext.xml that configures the beans for 
	the previously provided Java classes.
	///////////////////////////
	1><bean id="dataSource" ...>: This defines a bean for the DataSource, which is 
	the connection to your database. In this example, it's a simple in-memory H2 
	database. In a production environment, you would use a pooled DataSource like 
	HikariCP or c3p0.
	2><bean id="transactionManager" ...>: This configures the PlatformTransactionManager, 
	which is responsible for coordinating transactions with the DataSource. The 
	DataSourceTransactionManager is suitable for JDBC-based transactions. It 
	references the dataSource bean.
	3><bean id="transactionTemplate" ...>: This bean creates an instance of 
	TransactionTemplate. It needs a PlatformTransactionManager to function, so 
	it references the transactionManager bean.
	4><bean id="jdbcTemplate" ...>: This configures the JdbcTemplate, which simplifies 
	database access operations. It also requires a DataSource and references the 
	dataSource bean.
	5><bean id="productService" ...>: This defines the ProductService bean. The 
	<constructor-arg> elements are used to inject the transactionTemplate and jdbcTemplate 
	dependencies, satisfying the constructor of the ProductService class.
     -->

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="productService" class="com.example.ProductService">
        <constructor-arg ref="transactionTemplate"/>
        <constructor-arg ref="jdbcTemplate"/>
    </bean>

</beans>