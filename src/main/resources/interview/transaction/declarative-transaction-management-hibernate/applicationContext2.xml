<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans
          https://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context
          https://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/tx
          https://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/mvc
          https://www.springframework.org/schema/mvc/spring-mvc.xsd">
          
    <!-- 
    You want a full applicationContext.xml that wires everything (DataSource, 
    Hibernate JPA, Transaction Manager, DAOs, Services, Controllers) in case 
    you’re not using Spring Boot or Java config.

	Here’s a complete version that includes all beans explicitly (even though 
	normally we’d rely on <context:component-scan/> to auto-detect @Service, 
	@Repository, @Controller).
	///////////////////////
	This file includes:
	DataSource (BasicDataSource)
	EntityManagerFactory (Hibernate JPA)
	Transaction Manager (JpaTransactionManager)
	DAOs (UserDao, CourseDao, InvoiceDao)
	Services (UserService, CourseService, InvoiceService)
	Controllers (UserController, CourseController)
	<tx:annotation-driven> for @Transactional support
	<mvc:annotation-driven> for REST controllers
    -->

    <!-- Enable component scanning (controllers, services, repositories) -->
    <context:component-scan base-package="x.y"/>

    <!-- Enable @Controller REST support -->
    <mvc:annotation-driven/>

    <!-- ====================== DataSource ====================== -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/testdb?useSSL=false"/>
        <property name="username" value="root"/>
        <property name="password" value="password"/>
    </bean>

    <!-- ====================== EntityManagerFactory ====================== -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="x.y.model"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>

    <!-- ====================== Transaction Manager ====================== -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- Enable @Transactional annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- ====================== DAOs ====================== -->
    <bean id="userDao" class="x.y.dao.UserDao"/>
    <bean id="courseDao" class="x.y.dao.CourseDao"/>
    <bean id="invoiceDao" class="x.y.dao.InvoiceDao"/>

    <!-- ====================== Services ====================== -->
    <bean id="userService" class="x.y.service.UserService">
        <property name="userDao" ref="userDao"/>
        <property name="invoiceService" ref="invoiceService"/>
    </bean>

    <bean id="courseService" class="x.y.service.CourseService">
        <property name="courseDao" ref="courseDao"/>
    </bean>

    <bean id="invoiceService" class="x.y.service.InvoiceService">
        <property name="invoiceDao" ref="invoiceDao"/>
    </bean>

    <!-- ====================== Controllers ====================== -->
    <bean id="userController" class="x.y.controller.UserController">
        <property name="userService" ref="userService"/>
    </bean>

    <bean id="courseController" class="x.y.controller.CourseController">
        <property name="courseService" ref="courseService"/>
    </bean>

</beans>