<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans
          https://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context
          https://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/mvc
          https://www.springframework.org/schema/mvc/spring-mvc.xsd">
          
    <!--  
    here’s a clean dispatcher-servlet.xml for the previous setup.
	This is the Spring MVC context: it focuses on controllers, web components, 
	and view resolvers, while your applicationContext.xml handles services, 
	DAOs, transactions, and Hibernate.
	//////////////////
	<mvc:annotation-driven/> → enables Spring MVC annotations (@Controller, @RequestMapping, @RestController).
	<context:component-scan base-package="x.y.controller"/> → only controllers are picked up here (services are in applicationContext.xml).
	<mvc:resources/> → lets Spring serve static resources (CSS, JS, images).
	InternalResourceViewResolver → resolves view names returned from controllers to JSPs (return "home"; → /WEB-INF/views/home.jsp).
    -->

    <!-- Enable annotation-driven @Controller/@RestController -->
    <mvc:annotation-driven/>

    <!-- Scan only controllers in the web layer -->
    <context:component-scan base-package="x.y.controller"/>

    <!-- Static resource handling (css, js, images) -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <!-- View Resolver: maps return values to JSP files in /WEB-INF/views/ -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

</beans>