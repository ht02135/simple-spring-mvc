
https://chatgpt.com/

///////////////

Prerequisites

    Install AWS CDK CLI: npm install -g aws-cdk

    Install Java 11+ and Maven or Gradle

    Bootstrap your environment: cdk bootstrap

    Create a new Java CDK project:

cdk init app --language java

///////////////

Maven Dependencies (in pom.xml)

Ensure the following are added to your dependencies:

<dependencies>
    <dependency>
        <groupId>software.amazon.awscdk</groupId>
        <artifactId>aws-cdk-lib</artifactId>
        <version>2.135.0</version> <!-- Use latest version -->
    </dependency>
    <dependency>
        <groupId>software.constructs</groupId>
        <artifactId>constructs</artifactId>
        <version>10.3.0</version>
    </dependency>
</dependencies>

//////////////////

Java CDK Code Example (in your Stack class)

Here's a full working example of provisioning:

    VPC with public/private subnets
    Internet Gateway
    Security Group
    Application Load Balancer
    Route53 A record
    
//////////////

import software.amazon.awscdk.*;
import software.amazon.awscdk.services.ec2.*;
import software.amazon.awscdk.services.elasticloadbalancingv2.*;
import software.amazon.awscdk.services.route53.*;
import software.amazon.awscdk.services.route53.targets.LoadBalancerTarget;
import software.constructs.Construct;

public class NetworkStack extends Stack {
    public NetworkStack(final Construct scope, final String id) {
        this(scope, id, null);
    }

    public NetworkStack(final Construct scope, final String id, final StackProps props) {
        super(scope, id, props);

        // VPC with Public and Private subnets
        Vpc vpc = Vpc.Builder.create(this, "MyVpc")
            .maxAzs(2)
            .natGateways(1)
            .subnetConfiguration(List.of(
                SubnetConfiguration.builder()
                    .subnetType(SubnetType.PUBLIC)
                    .name("PublicSubnet")
                    .cidrMask(24)
                    .build(),
                SubnetConfiguration.builder()
                    .subnetType(SubnetType.PRIVATE_WITH_NAT)
                    .name("PrivateSubnet")
                    .cidrMask(24)
                    .build()
            ))
            .build();

        // Security Group
        SecurityGroup sg = SecurityGroup.Builder.create(this, "WebSg")
            .vpc(vpc)
            .allowAllOutbound(true)
            .description("Allow HTTP and HTTPS")
            .build();

        sg.addIngressRule(Peer.anyIpv4(), Port.tcp(80), "Allow HTTP");
        sg.addIngressRule(Peer.anyIpv4(), Port.tcp(443), "Allow HTTPS");

        // Application Load Balancer
        ApplicationLoadBalancer alb = ApplicationLoadBalancer.Builder.create(this, "MyALB")
            .vpc(vpc)
            .internetFacing(true)
            .securityGroup(sg)
            .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())
            .build();

        // Listener on port 80
        ApplicationListener listener = alb.addListener("Listener", BaseApplicationListenerProps.builder()
            .port(80)
            .open(true)
            .build());

        // Add default target group (you can attach EC2, ECS, Lambda etc. here)
        listener.addTargets("DefaultTarget", AddApplicationTargetsProps.builder()
            .port(80)
            .targets(List.of()) // Add your targets
            .build());

        // Route53 (public hosted zone required)
        HostedZone hostedZone = HostedZone.fromLookup(this, "MyZone", HostedZoneProviderProps.builder()
            .domainName("example.com")
            .build());

        ARecord aRecord = ARecord.Builder.create(this, "AliasRecord")
            .zone(hostedZone)
            .recordName("app") // app.example.com
            .target(RecordTarget.fromAlias(new LoadBalancerTarget(alb)))
            .build();
    }
}

//////////////////

Deploy

Run this from your project root:

cdk synth
cdk deploy

