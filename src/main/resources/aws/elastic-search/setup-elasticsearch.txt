
https://medium.com/gigasearch/aws-elasticsearch-tutorial-your-first-cluster-21726b77320a
AWS Elasticsearch Tutorial: Your First Cluster
setup-elasticsearch.txt

///////////////

Step 1: Choose Deployment Type

The first step in creating an AWS ES “Domain” (an Elasticsearch cluster) is to 

select a deployment type:
Development and testing

The “Production” deployment type forces you to have at least 2 Availability Zones (AZ) for your cluster.

If you’re just starting out and want to set up a test cluster, go with the “Development and Testing” option. This will be cheaper, since you can set up a single node cluster.

You’ll also pick your Elasticsearch version on this step. The options range from a very recent version (7.1 at the time of writing), all the way back to 1.5 (released in 2009). If you’re a new user of Elasticsearch and have no legacy requirements, we strongly recommend picking the latest version.

//////////////////

Step 2: Configure Cluster
Elasticsearch domain Name

This is straight forward, just choose a name for this cluster that’s unique within your account and region

Data Instances

What AWS ES calls “data instances” are more typically known as Elasticsearch data nodes. Data nodes hold all of your indexes’ document data (index shards), perform the indexing of those documents, and serve search queries. Data nodes form the bulk of your cluster — clusters scale horizontally by adding data nodes. 

AZ=3 az
instance type=r5.large.elasticsearch (default)
number of instance=3 bc 3az

de facto standard instance type for data nodes in an AWS Elasticsearch deployment for a wide range of use cases is i3.2xlarge. (link to the AWS docs that say this). i3.2xlarge’s have 64gb of memory

Since Elasticsearch performs its own replication and makes its own availability guarantees, EBS’s replication and availability guarantees are considered redundant or even counter-productive, while EBS’s network overhead introduces risk and sometimes unpredictable latency. For write heavy applications, the i3 instance store is the best you can get on AWS.

Number of Instances

The number of instances, as with most Elasticsearch configuration options, is going to depend on a variety of factors. Each additional node provides added CPU and RAM for indexing and serving search requests, as well as added storage. In general, the biggest factor determining how many nodes you add will depend on your storage needs. If you opted for a production configuration with at least 2 AZs, then you will need at least two nodes to replicate across the AZs.

//////////////////////

Dedicated master instances

Setting a dedicated master is optional for development, but required for production. Master node handles all changes to cluster state, such as nodes joining or leaving the cluster, changes to cluster settings, etc. Without dedicated masters, one of the data nodes will be elected master and will have to handle master node tasks as well as indexing and serving search requests. 

dedicated master instance type=r5.large.elasticsearch (default)
dedicated master instance count=3

Dedicated master instance type

For master nodes, we recommend r5.large. Unless you have a very large cluster state, or your use case requires constant changes to mappings and other cluster state changes, the 16gb of memory is typically enough.

Dedicated master count

There’s only two options here: 3 or 5. Of the dedicated masters, only one will be elected master and the others will remain idle. 

//////////////////////

Storage

storage type=EBS
EBS volume type=general purpose SSD
EBS storage size per noe=10

Storage type

You can choose between EBS and instance store, depending on which data node type you picked. Instance store is the more performant option, because there is no network overhead when reading from disk, and you aren’t limited on IOPS. EBS generally makes sense for high storage and low access requirements, since it is slower but about half the cost of instance store.

EBS volume type

If you chose EBS as the storage type, your options here are General Purpose SSD, Provisioned IOPS SSD, and magnetic. General Purpose can reach a maximum of 16,000 IOPS. IOPS scales from a minimum of 100, up to 16K at a rate of 3 IOPS per GB of storage. Running out of IOPS can be detrimental to a high IO use case like running Elasticsearch, so we generally don’t recommend this unless you have low throughput requirements.

Provisioned IOPS means you calculate how many IOPS you will need ahead of time and provision it. If you chose EBS instead of instance store, we recommend using Provisioned IOPS.

EBS storage size per node

Here you can set the storage capacity per node in your cluster. You should account for how many replica shards (copies of each shard) you plan to have when setting this value, since each additional replica will double storage requirements. Note that AWS Elasticsearch reserves 20% of storage capacity, up to 20GB, for administrative tasks.

///////////////

Encryption

One of AWS ES’s nicest features is their completely transparent offering of encryption-at-rest as a simple checkbox. In EC2, this is offered for EBS volumes, and they’ve extended that capability to AWS Elasticsearch Service. Impressively, they offer the same simplicity even when you’ve selected instance stores for your data storage.

If you enable encryption of data at rest, you will need to select a KMS key to encrypt the data. You can opt to use the default KMS key, but we recommend creating a separate key for increased isolation.

hung: personally i think encryption is overrated and might slowdown cache performance....

/////////////////

Snapshot Configuration

“Snapshots refers to Elasticsearch’s built-in backup mechanism. AWS Elasticsearch offers simple snapshot scheduling configuration, as well as allowing you to manage snapshotting yourself.

is it me or i think snapshot cache is just pointless???

//////////////////////

Step 3: Set up access
Network configuration

You can choose whether your Elasticsearch domain is publically accessible, or only accessible within your VPC. It is much more secure to have your domain only accessible within your VPC, as a potential attacker will need to be within your VPC to access your data. You might opt for public access if you have resources outside of your VPC, such as in Google Cloud, and do not have a VPN configured. In this case, you will need to whitelist IPs that can access this domain. We strongly encourage using VPC access.

hung: public is fine, especially you gonna setup access policy below, NO?

///////////////////

Kibana authentication

You can configure authentication into Kibana via Amazon Cognito. You’ll need to create a Cognito User pool and Cognito Identitiy pool prior to setting this up. Amazon makes it relatively easy to configure SAML for Kibana access, something which is non-trivial to set up on a self-hosted cluster.

///////////////////

Access policy

In this step, you can set up IAM policies for accessing this Elasticsearch domain. You can pick a template that fits your needs, with options for allowing open access (strongly discouraged), denying access, or allowing access to specific IPs or CIDR blocks (as shown in the above example)

///////////////////

Step 4: Review

Here you can review all of the configuration choices you made, with links to edit sections if needed.

Once you click “Confirm”, you’ll be taken to an overview page for your domain.

///////////////////////

Domain status will show Loading while the domain is being set up, which takes about 10 minutes. The status will change to Active once done, and the Endpoint field will populate with the url for the domain. Accessing the endpoint via HTTP should show the following if everything went well:

{
    "name": "im4OgiN",
    "cluster_name": "1234567890:test",
    "cluster_uuid": "ydiiUHb8QYCrHZFBPYW0Ig",
    "version": {
        "number": "6.8.0",
        "build_flavor": "oss",
        "build_type": "tar",
        "build_hash": "65b6179",
        "build_date": "2019-06-15T13:06:07.540272Z",
        "build_snapshot": false,
        "lucene_version": "7.7.0",
        "minimum_wire_compatibility_version": "5.6.0",
        "minimum_index_compatibility_version": "5.0.0"
    },
    "tagline": "You Know, for Search"
}

The Kibana field will also populate with the Kibana endpoint.

















